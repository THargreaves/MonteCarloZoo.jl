var documenterSearchIndex = {"docs":
[{"location":"index.html#MonteCarloZoo.jl","page":"Index","title":"MonteCarloZoo.jl","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Documentation for MonteCarloZoo.jl.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"MonteCarloZoo","category":"page"},{"location":"index.html#MonteCarloZoo","page":"Index","title":"MonteCarloZoo","text":"MonteCarloZoo\n\nA broad collection of Monte Carlo algorithms implemented in Julia.\n\n\n\n\n\n","category":"module"},{"location":"index.html#Module-Index","page":"Index","title":"Module Index","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Modules = [MonteCarloZoo]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"index.html#Detailed-API","page":"Index","title":"Detailed API","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Modules = [MonteCarloZoo]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"index.html#MonteCarloZoo.rejection_sampler-NTuple{6, Any}","page":"Index","title":"MonteCarloZoo.rejection_sampler","text":"rejection_sampler(target_density, proposal_density, proposal_sampler,\n                  scale, iterations, dimension)\n\nPerform rejection sampling using a supplied target and proposal distribution.\n\nRejection sampling involves sampling from a target distribution f using a proposal distribution g which we are able to directly sample from. In order for the resulting samples to be distributed according to f we require that fracf(x)g(x) is bounded from above by some constant M (scale) for all x in the support of f.\n\nUnder these conditions, the rejection sampling algorithm given below will generate independent samples from f:\n\nSample X sim g\nAccept X with probability fracf(X)Mg(X)\n\nArguments\n\ntarget_density::Function: density function for the target distribution.\nproposal_density::Function: density function for the proposal distribution.\nproposal_sampler::Function: a function that generates samples from the   proposal distribution.\nscale::Real: a scaling constant that bounds the ratio of the target and   proposal density.\niterations::Integer: the number of samples to generate.\ndimension::Integer: the expected dimension of each sample.\n\nNotes\n\nNo checks are made to ensure that the scale constant is valid or that the  proposal sampler and density match. If these conditions are not met, the resulting samples will not be distributed according to the target density.\nThe expected acceptance rate for the sampler is the reciprocal of scale.\n\nExamples\n\n# Sampling from a standard normal distribution using Cauchy proposals\ntarget_density(x) = exp(-x^2 / 2) / sqrt(2π)\nproposal_density(x) = (1 + x^2) / π \nproposal_sampler() = tan(π * (rand() - 0.5))\nscale = sqrt(2π / ℯ)\niterations = 100\ndimension = 1\n\nsamples = rejection_sampler(\n    target_density, proposal_density, proposal_sampler,\n    scale, iterations, dimension\n)\n\n\n\n\n\n","category":"method"}]
}
